
def search()
breaking the loop early in search if a word is not present in query
old: 
    for filename in forward_index.keys():
        weight_multiplier = 1
        for word in query_words:
            if word in term_freq[filename] and word in inv_doc_freq:
                #check to avoid key errors when word is not in term_freq or inv_doc_freq
                weight_multiplier *= term_freq[filename][word] * inv_doc_freq[word]

                result[filename] = weight_multiplier * doc_rank[filename]
            else:
                result[filename] = 0
                break
            

improved:
for filename in forward_index.keys():
        weight_multiplier = 1
        for word in query_words:
            if word not in term_freq[filename] or word not in inv_doc_freq:
                weight_multiplier = 0
                break
                #check to avoid key errors when word is not in term_freq or inv_doc_freq
            weight_multiplier *= term_freq[filename][word] * inv_doc_freq[word]
        result[filename] = weight_multiplier * doc_rank[filename]




def extract_file_lines(file_path)
removed a nested loop in extract_file_lines and used extend instead of append
old:
    lines = []
    with open(filepath, 'r', encoding="utf-8") as f:
        for line in f:
            sanitized_line = parse_line(line)
            if sanitized_line: #check if the line is not empty
                for word in sanitized_line:
                    lines.append(word)
    return(lines)

new: 
    lines = []
    with open(filepath, 'r', encoding="utf-8") as f:
        for line in f:
            sanitized_line = parse_line(line)
            if sanitized_line:  # Check if the sanitized line is not empty
                lines.extend(sanitized_line)
    return(lines)